<launch>
    <!--Starts up either a real o simulated panda arm.
        The low level-control of the arm can be performed with either effort or position control.
        
        In the imulation the arm will be spawned and moved to an initial joint pose.
    -->

    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${walltime}] [${node}]: ${message}" />

    <arg name="simulated" default="true"/>
    <arg name="gazebo_gui" default="true"/>
    <arg name="launch_gazebo" default="true"/>
    <arg name="start_controllers" default="true"/>
    <arg name="load_gripper" default="true"/>
    <arg name="load_robot_description" default="true"/>
    <arg name="robot_ip" default="0.0.0.0"/> <!-- Only needed in the real -->

    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="pitch" default="0"/>
    <arg name="roll" default="0"/>
    <arg name="yaw" default="0"/>

    <arg name="robot_name" default="panda"/>

     <!-- control_mode indicates what do the ros controller send as output to control the robot.
          Using effort gives most control to the ros controller.
          Using position abstracts the lower-level from the ros controller, which will just assume the robot goes to that position.
          In the real position means we delegate the position-to-torque control to franka, in the simulation instead we just trust 
          the simulator. The simulator may just set the joint position to the required one in an unrealistic way. -->
    <arg name="control_mode" default="effort"/>

    <arg name="start_joint_pose" default="0 0 0 -1 0 1 0"/>




    <group if="$(eval arg('control_mode') == 'effort' and not arg('simulated'))">
        <node name="$(anon print_error)" pkg="lr_panda" type="print_error.py" required="true">
            <param name="msg" value="panda_generic: only the position hardware interface is currently supported in the real. control_mode must be 'position'"/>
        </node>
    </group>





    <remap from="robot_description" to="$(arg robot_name)_description"/>
    <node name="joint_state_desired_publisher" pkg="topic_tools" type="relay" args="joint_states joint_states_desired" />

    <!-- Load the controller definitions -->
    <rosparam file="$(find lr_panda)/config/ros_controllers.yaml" command="load" subst_value="True"/>

    <group if="$(arg load_robot_description)">
      <param  name="$(arg robot_name)_description"
              command="$(find xacro)/xacro '$(find lr_panda)/urdf/panda_arm_generic.urdf.xacro'
              x:=$(arg x)
              y:=$(arg y)
              z:=$(arg z)
              roll:=$(arg roll)
              pitch:=$(arg pitch)
              yaw:=$(arg yaw)
              control_mode:=$(arg control_mode)
              load_hand:=$(arg load_gripper)
              robot_name:=$(arg robot_name)"/>
    </group>


    <!-- Only loads effort-based conttrollers if in simulation -->
    <arg  if="$(eval not arg('simulated') and arg('control_mode') == 'effort')"
          name="controllers_to_load"
          value=""/>
    
    <arg  if="$(eval not arg('simulated') and    arg('control_mode') == 'position'  and not arg('load_gripper'))"
          name="controllers_to_load"
          value="$(arg robot_name)_arm_position_trajectory_controller"/>
    
    <arg  if="$(eval not arg('simulated') and    arg('control_mode') == 'position'  and arg('load_gripper'))"
          name="controllers_to_load"
          value="$(arg robot_name)_arm_position_trajectory_controller"/>
          
    <arg  if="$(eval     arg('simulated') and    arg('control_mode') == 'effort'    and not arg('load_gripper'))"
          name="controllers_to_load"
          value="joint_state_controller $(arg robot_name)_arm_effort_trajectory_controller $(arg robot_name)_arm_effort_effort_controller $(arg robot_name)_arm_effort_position_controller"/>
    
    <arg  if="$(eval     arg('simulated') and    arg('control_mode') == 'effort'    and arg('load_gripper'))"
          name="controllers_to_load"
          value="joint_state_controller $(arg robot_name)_arm_effort_trajectory_controller $(arg robot_name)_arm_effort_effort_controller $(arg robot_name)_arm_effort_position_controller  $(arg robot_name)_hand_effort_effort_controller $(arg robot_name)_hand_effort_position_controller  $(arg robot_name)_hand_effort_trajectory_controller"/>
    
    <arg  if="$(eval     arg('simulated') and    arg('control_mode') == 'position'  and not arg('load_gripper'))"
          name="controllers_to_load"
          value="joint_state_controller $(arg robot_name)_arm_position_trajectory_controller"/>
    
    <arg  if="$(eval     arg('simulated') and    arg('control_mode') == 'position'  and arg('load_gripper'))"
          name="controllers_to_load"
          value="joint_state_controller $(arg robot_name)_arm_position_trajectory_controller $(arg robot_name)_hand_position_trajectory_controller"/>






    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
          args="--stopped $(arg controllers_to_load)">
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen"/>


    <group if="$(arg start_controllers)">
      <arg  if="$(eval     arg('simulated') and arg('control_mode') == 'effort' and not arg('load_gripper'))"
            name="controllers_to_start"
            value="['joint_state_controller', '$(arg robot_name)_arm_effort_trajectory_controller']"/>
      
      <arg  if="$(eval     arg('simulated') and arg('control_mode') == 'effort' and arg('load_gripper'))"
            name="controllers_to_start"
            value="['joint_state_controller', '$(arg robot_name)_arm_effort_trajectory_controller', '$(arg robot_name)_hand_effort_trajectory_controller']"/>
      
      <arg  if="$(eval     arg('simulated') and arg('control_mode') == 'position' and not arg('load_gripper'))"
            name="controllers_to_start"
            value="['joint_state_controller', '$(arg robot_name)_arm_position_trajectory_controller']"/>

      <arg  if="$(eval     arg('simulated') and arg('control_mode') == 'position' and arg('load_gripper'))"
            name="controllers_to_start"
            value="['joint_state_controller', '$(arg robot_name)_arm_position_trajectory_controller', '$(arg robot_name)_hand_position_trajectory_controller']"/>


      <arg  if="$(eval not arg('simulated') and arg('control_mode') == 'effort' and not arg('load_gripper'))"
            name="controllers_to_start"
            value="['$(arg robot_name)_arm_effort_trajectory_controller']"/>
      
      <arg  if="$(eval not arg('simulated') and arg('control_mode') == 'effort' and arg('load_gripper'))"
            name="controllers_to_start"
            value="['$(arg robot_name)_arm_effort_trajectory_controller', '$(arg robot_name)_hand_effort_trajectory_controller']"/>
      
      <arg  if="$(eval not arg('simulated') and arg('control_mode') == 'position' and not arg('load_gripper'))"
            name="controllers_to_start"
            value="['$(arg robot_name)_arm_position_trajectory_controller']"/>

      <arg  if="$(eval not arg('simulated') and arg('control_mode') == 'position' and arg('load_gripper'))"
            name="controllers_to_start"
            value="['$(arg robot_name)_arm_position_trajectory_controller']"/>

      <node name="start_ros_controller" pkg="lr_panda" type="start_ros_controller.py">
          <param name="controllers" value="$(arg controllers_to_start)"/>
      </node>
    </group>


    <group if="$(arg simulated)">
        <param name="/use_sim_time" value="true"/>
        <group if="$(arg launch_gazebo)">
            <!--launch GAZEBO with own world configuration -->
            <include file="$(find gazebo_ros)/launch/empty_world.launch">
                <arg name="debug" value="false" />
                <arg name="gui" value="$(arg gazebo_gui)" />
                <arg name="paused" value="false" />
                <arg name="use_sim_time" value="true" />
                <arg name="verbose" value="true" />
            </include>
        </group>


        <node name="spawn_urdf"
              pkg="gazebo_ros"
              type="spawn_model"
              args="-param $(arg robot_name)_description -urdf -model $(arg robot_name) -x $(arg x) -y $(arg y) -z $(arg z) -P $(arg pitch) -R $(arg roll) -Y $(arg yaw)" />
        <!-- The arguemnts: "-J panda_joint1 0 -J panda_joint2 0 -J panda_joint3 0 -J panda_joint4 -1 -J panda_joint5 0 -J panda_joint6 1 -J panda_joint7 0"
             work, but not nicely -->

        <arg  if="$(eval arg('control_mode') == 'effort')"
              name="trajectory_controller_name"
              value="$(arg robot_name)_arm_effort_trajectory_controller"/>
        <arg  if="$(eval arg('control_mode') == 'position')"
              name="trajectory_controller_name"
              value="$(arg robot_name)_arm_position_trajectory_controller"/>
        <node name="move_to_joint_pose_raw" pkg="lr_panda" type="move_to_joint_pose_raw.py"  output="screen"
              args="--traj_controller_name=$(arg trajectory_controller_name) --robot_name=$(arg robot_name) --joint_pose $(arg start_joint_pose) --"/> <!-- NOTE: NOT SAFE IN THE REAL WORLD, NO COLLISION CHECKS! -->

    </group>
    <group unless="$(arg simulated)">
        <group if="$(eval arg('control_mode') == 'position')">

            <include file="$(find franka_gripper)/launch/franka_gripper.launch" if="$(arg load_gripper)">
                <arg name="robot_ip" value="$(arg robot_ip)" />
            </include>

            <node name="franka_control" pkg="franka_control" type="franka_control_node" output="screen" required="true">
                <rosparam command="load" file="$(find franka_control)/config/franka_control_node.yaml" />
                <param name="robot_ip" value="$(arg robot_ip)" />
            </node>

            <rosparam command="load" file="$(find franka_control)/config/default_controllers.yaml" />
            <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_state_controller"/>
            <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
                  <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
                  <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states] </rosparam>
                  <param name="rate" value="30"/>
            </node>
        </group>
    </group>

</launch>
