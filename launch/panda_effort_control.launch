<launch>
    <arg name="simulated"/>
    <arg name="gazebo_gui" default="true"/>
    <arg name="launch_gazebo" default="true"/>

    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="pitch" default="0"/>
    <arg name="roll" default="0"/>
    <arg name="yaw" default="0"/>
    <!-- GAZEBO arguments -->
    <arg name="paused" default="false" />
    <arg name="use_sim_time" default="true" />
    <arg name="gui" default="true" />
    <arg name="headless" default="false" />
    <arg name="debug" default="false" />

    <arg name="effort_control" default="true" /> <!-- use effort controllers on the robot's joints -->



    <node name="joint_state_desired_publisher" pkg="topic_tools" type="relay" args="joint_states joint_states_desired" />


    <!-- Load the controller definitions -->
    <rosparam file="$(find panda)/config/ros_controllers.yaml" command="load" />


    <!-- Load the robot model with effort controllers -->
    <group if="$(arg effort_control)">
      <param name="robot_description"
           command="$(find xacro)/xacro '$(find panda)/urdf/panda_arm_standard_gripper.urdf.xacro'
           x:=$(arg x)
           y:=$(arg y)
           z:=$(arg z)
           roll:=$(arg roll)
           pitch:=$(arg pitch)
           yaw:=$(arg yaw)
           control_mode:=effort"/>

          <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
                args="--stopped joint_state_controller panda_arm_effort_trajectory_controller panda_hand_effort_trajectory_controller panda_arm_effort_effort_controller panda_hand_effort_effort_controller panda_arm_effort_position_controller panda_hand_effort_position_controller" />

    </group>
    <!-- Load the robot model with position controllers, not realistic, the position of the joints are enforced directly by the simulator disregarding physics-->
    <group unless="$(arg effort_control)">
      <param name="robot_description"
           command="$(find xacro)/xacro '$(find panda)/urdf/panda_arm_standard_gripper.urdf.xacro'
           x:=$(arg x)
           y:=$(arg y)
           z:=$(arg z)
           roll:=$(arg roll)
           pitch:=$(arg pitch)
           yaw:=$(arg yaw)
           control_mode:=position"/>

      <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
            args="--stopped joint_state_controller panda_arm_position_trajectory_controller panda_hand_position_trajectory_controller" />

    </group>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

    <node name="start_ros_controller" pkg="panda" type="start_ros_controller.py">
      <param name="controllers" value="['panda_arm_effort_trajectory_controller', 'joint_state_controller']"/>
    </node>


    <group if="$(arg simulated)">
        <param name="/use_sim_time" value="true"/>
        <group if="$(arg launch_gazebo)">
            <!--launch GAZEBO with own world configuration -->
            <include file="$(find gazebo_ros)/launch/empty_world.launch">
                <arg name="debug" value="false" />
                <arg name="gui" value="$(arg gazebo_gui)" />
                <arg name="paused" value="false" />
                <arg name="use_sim_time" value="true" />
            </include>
        </group>


        <node name="spawn_urdf"
              pkg="gazebo_ros"
              type="spawn_model"
              args="-param robot_description -urdf -model panda -x $(arg x) -y $(arg y) -z $(arg z) -P $(arg pitch) -R $(arg roll) -Y $(arg yaw)" />
        <!-- The arguemnts: "-J panda_joint1 0 -J panda_joint2 0 -J panda_joint3 0 -J panda_joint4 -1 -J panda_joint5 0 -J panda_joint6 1 -J panda_joint7 0"
             work, but not nicely -->

        <node name="move_to_start_pose" pkg="panda" type="move_to_start_pose_raw.py"/> <!-- NOTE: NOT SAFE IN THE REAL WORLD, NO COLLISION CHECKS! -->
        <!--<node name="spawn_urdf"
              pkg="gazebo_ros"
              type="spawn_model"
              args="-param robot_description -urdf -model panda" />-->
    </group>
    <group unless="$(arg simulated)">
        <!-- TODO launch real robot -->
    </group>

</launch>
